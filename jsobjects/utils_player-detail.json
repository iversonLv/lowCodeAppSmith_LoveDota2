{
  "unpublishedCollection": {
    "name": "utils",
    "pageId": "player-detail",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\tdurationFormat: (duration) => {\n    let minus = false;\n    duration < 0 ? minus = true : minus = false;\n    const getMin = (Math.abs(Math.floor(duration) / 60)).toString().split('.')[0];\n    let getSec = Math.abs(Math.floor(duration)) % 60 === 0 ? '00' : Math.abs(Math.floor(duration)) % 60;\n    if (getSec < 10 && getSec > 0) {\n      getSec = '0' + getSec + '';\n    }\n    return minus ? `-${getMin}:${getSec}` : `${getMin}:${getSec}`;\n  },\n\t\n\tdateTime: (dayTillToday, date) => {\n\t\tconst dateTime = moment(date * 1000).format('MMM d, y')\n\t\treturn `${dayTillToday} | ${dateTime}`\n\t},\n\t\n\tdayTillToday: (date) => {\n    const today = (new Date()).toString();\n    const todayParse = Date.parse(today);\n\n    const lastPlayedTillToday = todayParse - date * 1000;\n\n    const tillYears = lastPlayedTillToday / 1000 / 60  / 60 / 24 / 30 / 12;\n    const tillMonths = lastPlayedTillToday / 1000 / 60  / 60 / 24 / 30;\n    const tillDays = lastPlayedTillToday / 1000 / 60  / 60 / 24;\n    const tillHours = lastPlayedTillToday / 1000 / 60  / 60;\n    const tillMinutes = lastPlayedTillToday / 1000 / 60;\n\n    if (date === 0 ) {\n      return null;\n    }\n    if (tillYears >= 1 ) {\n      if (Math.floor(tillYears) > 1) {\n        return `${Math.floor(tillYears)} years ago`;\n      } else {\n        return 'a year ago';\n      }\n    } else if (tillMonths >= 1 ){\n      if (Math.floor(tillMonths) > 1) {\n        return `${Math.floor(tillMonths)} months ago`;\n      } else {\n        return 'a month ago';\n      }\n    } else if (tillDays >= 1) {\n      if (Math.floor(tillDays) > 1) {\n        return `${Math.floor(tillDays)} days ago`;\n      } else {\n        return 'a day ago';\n      }\n    } else if (tillHours >= 1) {\n      if (Math.floor(tillHours) > 1) {\n        return `${Math.floor(tillHours)} hours ago`;\n      } else {\n        return 'an hour ago';\n      }\n    } else if (tillMinutes  >= 1) {\n      if (Math.floor(tillMinutes) > 1) {\n        return `${Math.floor(tillMinutes)} minutes ago`;\n      } else {\n        return 'a minute ago';\n      }\n    }\n    return null;\n\t},\n\t\n\tnameDestruct: (value, separator, separatorPlacement, upperCase) => {\n    // example lobby_type name is lobby_type_normal, we need destruct only last string and uppercase\n    if (value !== null && value.split(separator).length > 1) {\n      if (upperCase === 'upperCase') {\n        return value.split(separator).splice(separatorPlacement).map(i => i.charAt(0).toUpperCase() + i.slice(1, i.length)).join(' ');\n      } else {\n        return value.split(separator).splice(separatorPlacement).join(' ');\n      }\n    } else {\n      return value;\n    }\n  },\n\tisWin: match => match.player_slot < 128 && match.radiant_win || match.player_slot > 127 && !match.radiant_win,\n\taverMaxKda: (matches, kda) =>  _.round(_.reduce(_.map(matches, match => match[kda]), (cur, total) => cur + total, 0 ) / 20),\n\taverMaxData: (matches) => {\n\t\tconst winrate = (_.filter(matches, this.isWin).length / 20 * 100).toFixed(2) + '%'\n\t\tconst kills = this.averMaxKda(matches, 'kills')\n\t\tconst mostKillsMatch = _.maxBy(matches, 'kills')\n\t\tconst deaths = this.averMaxKda(matches, 'deaths')\n\t\tconst mostDeathsMatch = _.maxBy(matches, 'deaths')\n\t\tconst assists = this.averMaxKda(matches, 'assists')\n\t\tconst mostAssistsMatch = _.maxBy(matches, 'assists')\n\t\treturn {\n\t\t\twinrate,\n\t\t\tkills,\n\t\t\tdeaths,\n\t\t\tassists,\n\t\t\tmostKills: mostKillsMatch.kills,\n\t\t\tmostKillsHeroId: mostKillsMatch.hero_id,\n\t\t\tmostDeaths: mostDeathsMatch.deaths,\n\t\t\tmostDeathsHeroId: mostDeathsMatch.hero_id,\n\t\t\tmostAssists: mostAssistsMatch.assists,\n\t\t\tmostAssistsHeroId: mostAssistsMatch.hero_id\n\t\t}\n\t}\n}",
    "variables": []
  },
  "id": "player-detail_utils",
  "deleted": false,
  "gitSyncId": "625844870d3d384069c0e4c7_625a526d0d3d384069c162d3"
}