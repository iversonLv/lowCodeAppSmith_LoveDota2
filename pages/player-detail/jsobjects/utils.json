{
  "unpublishedCollection": {
    "name": "utils",
    "pageId": "player-detail",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\tdurationFormat: (duration) => {\n    let minus = false;\n    duration < 0 ? minus = true : minus = false;\n    const getMin = (Math.abs(Math.floor(duration) / 60)).toString().split('.')[0];\n    let getSec = Math.abs(Math.floor(duration)) % 60 === 0 ? '00' : Math.abs(Math.floor(duration)) % 60;\n    if (getSec < 10 && getSec > 0) {\n      getSec = '0' + getSec + '';\n    }\n    return minus ? `-${getMin}:${getSec}` : `${getMin}:${getSec}`;\n  },\n\t\n\tdateTime: (dayTillToday, date) => {\n\t\tconst dateTime = moment(date * 1000).format('MMM d, y')\n\t\treturn `${dayTillToday} | ${dateTime}`\n\t},\n\t\n\tdayTillToday: (date) => {\n    const today = (new Date()).toString();\n    const todayParse = Date.parse(today);\n\n    const lastPlayedTillToday = todayParse - date * 1000;\n\n    const tillYears = lastPlayedTillToday / 1000 / 60  / 60 / 24 / 30 / 12;\n    const tillMonths = lastPlayedTillToday / 1000 / 60  / 60 / 24 / 30;\n    const tillDays = lastPlayedTillToday / 1000 / 60  / 60 / 24;\n    const tillHours = lastPlayedTillToday / 1000 / 60  / 60;\n    const tillMinutes = lastPlayedTillToday / 1000 / 60;\n\n    if (date === 0 ) {\n      return null;\n    }\n    if (tillYears >= 1 ) {\n      if (Math.floor(tillYears) > 1) {\n        return `${Math.floor(tillYears)} years ago`;\n      } else {\n        return 'a year ago';\n      }\n    } else if (tillMonths >= 1 ){\n      if (Math.floor(tillMonths) > 1) {\n        return `${Math.floor(tillMonths)} months ago`;\n      } else {\n        return 'a month ago';\n      }\n    } else if (tillDays >= 1) {\n      if (Math.floor(tillDays) > 1) {\n        return `${Math.floor(tillDays)} days ago`;\n      } else {\n        return 'a day ago';\n      }\n    } else if (tillHours >= 1) {\n      if (Math.floor(tillHours) > 1) {\n        return `${Math.floor(tillHours)} hours ago`;\n      } else {\n        return 'an hour ago';\n      }\n    } else if (tillMinutes  >= 1) {\n      if (Math.floor(tillMinutes) > 1) {\n        return `${Math.floor(tillMinutes)} minutes ago`;\n      } else {\n        return 'a minute ago';\n      }\n    }\n    return null;\n\t},\n\t\n\tnameDestruct: (value, separator, separatorPlacement, upperCase) => {\n    // example lobby_type name is lobby_type_normal, we need destruct only last string and uppercase\n    if (value !== null && value.split(separator).length > 1) {\n      if (upperCase === 'upperCase') {\n        return value.split(separator).splice(separatorPlacement).map(i => i.charAt(0).toUpperCase() + i.slice(1, i.length)).join(' ');\n      } else {\n        return value.split(separator).splice(separatorPlacement).join(' ');\n      }\n    } else {\n      return value;\n    }\n  },\n\tisWin: match => match.player_slot < 128 && match.radiant_win || match.player_slot > 127 && !match.radiant_win,\n\taverMax: (matches, field) =>  {\n\t\treturn field !== 'duration' ?\n\t\t\tthis.greaterNum((_.reduce(_.map(matches, match => match[field]), (cur, total) => cur + total, 0 ) / 20).toFixed(), 1000, 'K') :\n\t\t  (_.reduce(_.map(matches, match => match[field]), (cur, total) => cur + total, 0 ) / 20)\n\t},\n\taverMaxData: (matches) => {\n\t\tconst winrate = (_.filter(matches, this.isWin).length / 20 * 100).toFixed(2) + '%'\n\t\t\n\t\tconst kills = this.averMax(matches, 'kills')\n\t\tconst most_kills_match = _.maxBy(matches, 'kills')\n\t\t\n\t\tconst deaths = this.averMax(matches, 'deaths')\n\t\tconst most_deaths_match = _.maxBy(matches, 'deaths')\n\t\t\n\t\tconst assists = this.averMax(matches, 'assists')\n\t\tconst most_assists_match = _.maxBy(matches, 'assists')\n\t\t\n\t\tconst gold_per_min = this.averMax(matches, 'gold_per_min')\n\t\tconst most_gold_per_min_match = _.maxBy(matches, 'gold_per_min')\n\t\t\n\t\tconst xp_per_min = this.averMax(matches, 'xp_per_min')\n\t\tconst most_xp_per_min_match = _.maxBy(matches, 'xp_per_min')\n\t\t\n\t\tconst last_hits = this.averMax(matches, 'last_hits')\n\t\tconst most_last_hits_match = _.maxBy(matches, 'last_hits')\n\t\t\n\t\tconst hero_damage = this.averMax(matches, 'hero_damage')\n\t\tconst most_hero_damage_match = _.maxBy(matches, 'hero_damage')\n\t\t\n\t\tconst hero_healing = this.averMax(matches, 'hero_healing')\n\t\tconst most_hero_healing_match = _.maxBy(matches, 'hero_healing')\n\t\t\n\t\tconst tower_damage = this.averMax(matches, 'tower_damage')\n\t\tconst most_tower_damage_match = _.maxBy(matches, 'tower_damage')\n\t\t\n\t\tconst duration = this.durationFormat(this.averMax(matches, 'duration'))\n\t\tconst most_duration_match = _.maxBy(matches, 'duration')\n\t\treturn {\n\t\t\twinrate,\n\t\t\tkills,\n\t\t\tdeaths,\n\t\t\tassists,\n\t\t\tgold_per_min,\n\t\t\txp_per_min,\n\t\t\tlast_hits,\n\t\t\thero_damage,\n\t\t\thero_healing,\n\t\t\ttower_damage,\n\t\t\tduration,\n\t\t\tmost_kills: most_kills_match.kills,\n\t\t\tmost_kills_hero_id: most_kills_match.hero_id,\n\t\t\tmost_deaths: most_deaths_match.deaths,\n\t\t\tmost_deaths_hero_id: most_deaths_match.hero_id,\n\t\t\tmost_assists: most_assists_match.assists,\n\t\t\tmost_assists_hero_id: most_assists_match.hero_id,\n\t\t\tmost_gold_per_min: this.greaterNum(most_gold_per_min_match.gold_per_min, 1000, 'K'),\n\t\t\tmost_gold_per_min_hero_id: most_gold_per_min_match.hero_id,\n\t\t\tmost_xp_per_min: this.greaterNum(most_xp_per_min_match.xp_per_min, 1000, 'K'),\n\t\t\tmost_xp_per_min_hero_id: most_xp_per_min_match.hero_id,\n\t\t\tmost_last_hits: this.greaterNum(most_last_hits_match.last_hits, 1000, 'K'),\n\t\t\tmost_last_hits_hero_id: most_last_hits_match.hero_id,\n\t\t\tmost_hero_damage: this.greaterNum(most_hero_damage_match.hero_damage, 1000, 'K'),\n\t\t\tmost_hero_damage_hero_id: most_hero_damage_match.hero_id,\n\t\t\tmost_hero_healing: this.greaterNum(most_hero_healing_match.hero_healing, 1000, 'K'),\n\t\t\tmost_hero_healing_hero_id: most_hero_healing_match.hero_id,\n\t\t\tmost_tower_damage: this.greaterNum(most_tower_damage_match.tower_damage, 1000, 'K'),\n\t\t\tmost_tower_damage_hero_id: most_tower_damage_match.hero_id,\n\t\t\tmost_duration: this.durationFormat(most_duration_match.duration),\n\t\t\tmost_duration_hero_id: most_duration_match.hero_id,\n\t\t}\n\t},\n\tgreaterNum: (num, gN, unit) =>  {\n\t\tlet minus = '';\n    if (num < 0) {\n      minus = '-';\n    }\n    num = Math.abs(num);\n    if (num > gN) {\n      const newNum = (num / gN).toFixed(1);\n      return `${minus}${newNum}${unit}`;\n    } else {\n      return `${minus}${num}`;\n    }\n\t},\n\trankTier: (rank_tier, leaderboard_rank) => {\n\t\tlet rank_tiker_icon = ''\n\t\tif (rank_tier) {\n\t\t\tif (leaderboard_rank >= 1 && leaderboard_rank <=10 ) {\n\t\t\t\trank_tiker_icon = rank_tier.toString()[0] + 'c'\n\t\t\t} else if (leaderboard_rank <=100 && leaderboard_rank > 10) {\n\t\t\t\trank_tiker_icon = rank_tier.toString()[0] + 'b'\n\t\t\t} else {\n\t\t\t\trank_tiker_icon = rank_tier.toString()[0]\n\t\t\t}\n\t\t} else {\n\t\t\trank_tiker_icon = 0\n\t\t}\n\t\treturn `https://www.opendota.com/assets/images/dota2/rank_icons/rank_icon_${rank_tiker_icon}.png`\n\t},\n}",
    "variables": []
  },
  "id": "player-detail_utils",
  "deleted": false,
  "gitSyncId": "625844870d3d384069c0e4c7_625a526d0d3d384069c162d3"
}